<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0073)http://struts.apache.org/2.2.1.1/docs/struts-2-junit-plugin-tutorial.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <link type="text/css" rel="stylesheet" href="./Struts 2 JUnit Plugin Tutorial_files/default.css">
    <style type="text/css">
      .dp-highlighter {
        width:95% !important;
      }
    </style>
    <style type="text/css">
      .footer {
        background-image:      url('https://cwiki.apache.org/confluence/images/border/border_bottom.gif');
        background-repeat:     repeat-x;
        background-position:   left top;
        padding-top:           4px;
        color:                 #666;
      }
    </style>
    <script type="text/javascript" language="javascript">
      var hide = null;
      var show = null;
      var children = null;

      function init() {
        /* Search form initialization */
        var form = document.forms['search'];
        if (form != null) {
          form.elements['domains'].value = location.hostname;
          form.elements['sitesearch'].value = location.hostname;
        }

        /* Children initialization */
        hide = document.getElementById('hide');
        show = document.getElementById('show');
        children = document.all != null ?
                   document.all['children'] :
                   document.getElementById('children');
        if (children != null) {
          children.style.display = 'none';
          show.style.display = 'inline';
          hide.style.display = 'none';
        }
      }

      function showChildren() {
        children.style.display = 'block';
        show.style.display = 'none';
        hide.style.display = 'inline';
      }

      function hideChildren() {
        children.style.display = 'none';
        show.style.display = 'inline';
        hide.style.display = 'none';
      }
    </script>
    <title>Struts 2 JUnit Plugin Tutorial</title>
  </head>
  <body onload="init()">
    <table border="0" cellpadding="2" cellspacing="0" width="100%">
      <tbody><tr class="topBar">
        <td align="left" valign="middle" class="topBarDiv" nowrap="">
          &nbsp;<a href="http://struts.apache.org/2.2.1.1/docs/home.html" title="Apache Struts 2 Documentation">Apache Struts 2 Documentation</a>&nbsp;&gt;&nbsp;<a href="http://struts.apache.org/2.2.1.1/docs/home.html" title="Home">Home</a>&nbsp;&gt;&nbsp;<a href="http://struts.apache.org/2.2.1.1/docs/tutorials.html" title="Tutorials">Tutorials</a>&nbsp;&gt;&nbsp;<a href="" title="Struts 2 JUnit Plugin Tutorial">Struts 2 JUnit Plugin Tutorial</a>
        </td>
        <td align="right" valign="middle" nowrap="">
          <form name="search" action="http://www.google.com/search" method="get">
            <input type="hidden" name="ie" value="UTF-8">
            <input type="hidden" name="oe" value="UTF-8">
            <input type="hidden" name="domains" value="struts.apache.org">
            <input type="hidden" name="sitesearch" value="struts.apache.org">
            <input type="text" name="q" maxlength="255" value="">        
            <input type="submit" name="btnG" value="Google Search">
          </form>
        </td>
      </tr> 
    </tbody></table>

    <div id="PageContent">
      <div class="pageheader" style="padding: 6px 0px 0px 0px;">
        <!-- We'll enable this once we figure out how to access (and save) the logo resource -->
        <!--img src="/wiki/images/confluence_logo.gif" style="float: left; margin: 4px 4px 4px 10px;" border="0"-->
        <div style="margin: 0px 10px 0px 10px" class="smalltext">Apache Struts 2 Documentation</div>
        <div style="margin: 0px 10px 8px 10px" class="pagetitle">Struts 2 JUnit Plugin Tutorial</div>

        <div class="greynavbar" align="right" style="padding: 2px 10px; margin: 0px;">
          <a href="https://cwiki.apache.org/confluence/pages/editpage.action?pageId=14811898">
            <img src="./Struts 2 JUnit Plugin Tutorial_files/notep_16.gif" height="16" width="16" border="0" align="absmiddle" title="Edit Page"></a>
            <a href="https://cwiki.apache.org/confluence/pages/editpage.action?pageId=14811898">Edit Page</a>
          &nbsp;
          <a href="https://cwiki.apache.org/confluence/pages/listpages.action?key=WW">
            <img src="./Struts 2 JUnit Plugin Tutorial_files/browse_space.gif" height="16" width="16" border="0" align="absmiddle" title="Browse Space"></a>
            <a href="https://cwiki.apache.org/confluence/pages/listpages.action?key=WW">Browse Space</a>
          &nbsp;
          <a href="https://cwiki.apache.org/confluence/pages/createpage.action?spaceKey=WW&fromPageId=14811898">
            <img src="./Struts 2 JUnit Plugin Tutorial_files/add_page_16.gif" height="16" width="16" border="0" align="absmiddle" title="Add Page"></a>
          <a href="https://cwiki.apache.org/confluence/pages/createpage.action?spaceKey=WW&fromPageId=14811898">Add Page</a>
          &nbsp;
          <a href="https://cwiki.apache.org/confluence/pages/createblogpost.action?spaceKey=WW&fromPageId=14811898">
            <img src="./Struts 2 JUnit Plugin Tutorial_files/add_blogentry_16.gif" height="16" width="16" border="0" align="absmiddle" title="Add News"></a>
          <a href="https://cwiki.apache.org/confluence/pages/createblogpost.action?spaceKey=WW&fromPageId=14811898">Add News</a>
        </div>
      </div>
      <div class="pagesubheading" style="margin: 0px 10px 0px 10px;">
        #editReport()
      </div>

      <div class="pagecontent">
        <div class="wiki-content">
          <p>When creating unit tests for your Struts 2 application you'll want to be able to test certain aspects of the action class that normally require the action to be running within a Servlet container and the Struts 2 interceptors to have executed.&nbsp; For example if your Struts 2 action class includes a validate method that checks the values of the instance fields populated by the user's input on a Struts 2 form, you need the interceptors to have run that get the user's form field input out of request scope and assign the form field values to the appropriate instance fields.</p>

<p>Struts 2 provides a JUnit plugin library that makes it easier to develop unit tests for testing your Struts 2 action classes.&nbsp; This tutorial will provide an example of how to use the Struts 2 JUnit plugin.</p>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./Struts 2 JUnit Plugin Tutorial_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td>This tutorial assumes the reader knows how to create a Struts 2 application and how to write unit tests using JUnit.</td></tr></tbody></table></div>


<p>To use the Struts 2 JUnit plugin, you'll need to have the plugin's Jar file on your application's class path.&nbsp; If you're using Maven you can add this dependency to your pom.xml.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Struts 2 JUnit Plugin Dependency</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.apache.struts<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>struts2-junit-plugin<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>STRUTS_VERSION<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>

</pre>
</div></div>

<p>Of course replace STRUTS_VERSION with the current Struts 2 version number.</p>

<p>For this tutorial we'll use the following Struts 2 ActionSupport class.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>AccountAction.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class AccountAction <span class="code-keyword">extends</span> ActionSupport {

	<span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> <span class="code-object">long</span> serialVersionUID = 1L;

	<span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> Logger logger = Logger.getLogger( AccountAction.class.getName() );

	<span class="code-keyword">private</span> Account accountBean;

	<span class="code-keyword">public</span> <span class="code-object">String</span> execute(){

		<span class="code-keyword">return</span> SUCCESS;

	}

	<span class="code-keyword">public</span> void validate(){

		logger.debug(<span class="code-quote">"In method validate. accountBean's state is "</span> + accountBean );

		<span class="code-keyword">if</span> ( accountBean.getUserName().length() == 0 ){

			addFieldError( <span class="code-quote">"accountBean.userName"</span>, <span class="code-quote">"User name is required."</span> );

		}

		<span class="code-keyword">if</span> ( accountBean.getUserName().length() &lt; 5 ) {

			addFieldError( <span class="code-quote">"accountBean.userName"</span>, <span class="code-quote">"User name must be at least 5 characters <span class="code-object">long</span>."</span> );

		}

		<span class="code-keyword">if</span> ( accountBean.getUserName().length() &gt; 10 ) {

			addFieldError( <span class="code-quote">"accountBean.userName"</span>, <span class="code-quote">"User name cannot be at more than 10 characters <span class="code-object">long</span>."</span> );

		}


	}

	<span class="code-keyword">public</span> Account getAccountBean() {
		<span class="code-keyword">return</span> accountBean;
	}

	<span class="code-keyword">public</span> void setAccountBean(Account accountBean) {
		<span class="code-keyword">this</span>.accountBean = accountBean;
	}

}


</pre>
</div></div>

<p>The above action class is called after a user enters information on a create account form.  Struts takes the user's input on the form fields and uses those values to populate the state of the Account object (accountBean).</p>

<p>Then the validate method is executed to check the values of the accountBean's instance fields against certain business rules (for example the length of the username cannot be more than 10).</p>

<p>To test the validate method we can use the Struts 2 JUnit plugin to simulate the Servlet container and Struts 2 framework. Our Junit test class just needs to extend the StrutsTestCase.  The StrutsTestCase class is part of the Strut 2 JUnit Plugin library.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>JUnit Test Case For Struts Action Class</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class TestAccountActionUsingStrutsTestCase <span class="code-keyword">extends</span> StrutsTestCase {

    <span class="code-keyword">public</span> void testUserNameErrorMessage() <span class="code-keyword">throws</span> Exception {

    	request.setParameter(<span class="code-quote">"accountBean.userName"</span>, <span class="code-quote">"Bruc"</span>);
    	request.setParameter(<span class="code-quote">"accountBean.password"</span>, <span class="code-quote">"test"</span>);

    	ActionProxy proxy = getActionProxy(<span class="code-quote">"/createaccount"</span>);

    	AccountAction accountAction = (AccountAction) proxy.getAction();

        proxy.execute();

        assertTrue(<span class="code-quote">"Problem There were no errors present in fieldErrors but there should have been one error present"</span>, accountAction.getFieldErrors().size() == 1);
		assertTrue(<span class="code-quote">"Problem field account.userName not present in fieldErrors but it should have been"</span>,
				accountAction.getFieldErrors().containsKey(<span class="code-quote">"accountBean.userName"</span>) );

    }

    <span class="code-keyword">public</span> void testUserNameCorrect() <span class="code-keyword">throws</span> Exception {

    	request.setParameter(<span class="code-quote">"accountBean.userName"</span>, <span class="code-quote">"Bruce"</span>);
    	request.setParameter(<span class="code-quote">"accountBean.password"</span>, <span class="code-quote">"test"</span>);

    	ActionProxy proxy = getActionProxy(<span class="code-quote">"/createaccount"</span>);

    	AccountAction accountAction = (AccountAction) proxy.getAction();

        <span class="code-object">String</span> result = proxy.execute();

        assertTrue(<span class="code-quote">"Problem There were errors present in fieldErrors but there should not have been any errors present"</span>, accountAction.getFieldErrors().size() == 0);
        assertEquals(<span class="code-quote">"Result returned form executing the action was not success but it should have been."</span>, <span class="code-quote">"success"</span>, result);

    }

}


</pre>
</div></div>

<p>The request object above is a MockHttpServletRequest provided by the StrutsTestCase class.  We can use this mock Servlet Request object to set values on the request scope as if the user had typed those values into a Struts 2 form input fields.  Those values will then be available to the Struts 2 action class.</p>

<p>We then create a proxy of the createaccount action.  This action is defined in struts.xml as follows.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>struts.xml</b></div><div class="codeContent panelContent">
<pre class="code-java">&lt;action name=<span class="code-quote">"createaccount"</span> class=<span class="code-quote">"edu.ku.it.si.struts2_junit_example.action.AccountAction"</span>&gt;
	&lt;result&gt;/thankyou.jsp&lt;/result&gt;
	&lt;result name=<span class="code-quote">"input"</span>&gt;/createaccount.jsp&lt;/result&gt;
&lt;/action&gt;

</pre>
</div></div>

<p>When we run this test, the proxy of the createaccount action will be executed which will cause the Struts 2 interceptors to fire (so the request scope values will be assigned to the correct Action class instance fields) and then the validate method will be executed.</p>

<p>The two test methods above are used to test the action's validate method when the username doesn't meet the business requirements (too few characters) and when the username does meet the business requirements.</p>

<p>Note in the second test method where we have the statement: </p>

<p><tt>String result = proxy.execute();</tt></p>

<p>This statement stores the result returned by the Action class (e.g. "success") which we can then use in an assert statement to test if the result is what it should be.</p>

<p><tt>assertEquals("Result returned form executing the action was not success but it should have been.", "success", result);</tt></p>

<h3><a name="Struts2JUnitPluginTutorial-TestingAStrutsActionWhenUsingSpring"></a>Testing A Struts Action When Using Spring</h3>

<p>If your Struts application is using Spring to manage class relationships and you want test your Struts action class with the Spring container, then have your test class extend <tt>StrutsSpringTestCase</tt> instead of <tt>StrutsTestCase</tt>.  </p>

<p>The <tt>StrutsSpringTestCase</tt> class expects your Spring configuration file to be loaded from <tt>classpath:applicationContext.xml</tt> (configuration file named applicationContext.xml and in the root of the class path).  If your Spring configuration file has a different name or location, in your test class override method:</p>

<p> <tt>protected java.lang.String getContextLocations()</tt></p>

<p>For example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Specify Spring Configuration File Location Example</b></div><div class="codeContent panelContent">
<pre class="code-java">
@Override
<span class="code-keyword">public</span> <span class="code-object">String</span> getContextLocations() {
		
  <span class="code-keyword">return</span> <span class="code-quote">"edu/ku/it/si/tutorial/action/TestAccountAction-context.xml"</span>;

}

</pre>
</div></div>


        </div>

        
      </div>
    </div>
    <div class="footer">
      Generated by
      <a href="http://www.atlassian.com/confluence/">Atlassian Confluence</a> (Version: 3.2 Build: 1810 Mar 16, 2010)
      <a href="http://could.it/autoexport/">Auto Export Plugin</a> (Version: 1.0.0-dkulp)
    </div>
  
</body></html>